#!/usr/bin/Rscript
library("knitr")
library("tools")
library("argparser", quiet=TRUE)

try_system2 = function(command, args, con){
    error = system2(command=command, args=args, stderr=con, stdout=con)
    if(error != 0){
        error_text = paste0(
            "Encountered error during execution. Interrupting.\n",
            "Error code: ", error)
        stop(error_text)
        }
    }

compile = function(basename, auxfiles, con, out){

    name = paste0(basename, ".tex")

    try_system2("pdflatex", args=name, out)
    for(auxname in auxfiles){
        system2("bibtex", args=auxname, stderr=con, stdout=con) # warnings from this are OK
        }
    try_system2("pdflatex", args=name, out)
    try_system2("pdflatex", args=name, out)
    }


main = function(args){
    message("Compilling file:", args$file)

    ext = file_ext(args$file)
    basename = file_path_sans_ext(args$file)
    
    if(is.na(args$log)){
        con = ""
        } else {
        con = args$log
        }

    if(args$verbose){
        out = con
        } else {
        out = FALSE
        }

    if(args$multibib){
        auxfiles = dir(pattern=".aux")
        } else {
        auxfiles = paste0(basename, ".aux")
        }

    if(tolower(ext) == "rtex"){    
        knit(args$file)
        compile(basename, auxfiles, con, out)
        } else if(tolower(ext) == "tex"){
        compile(basename, auxfiles, con, out)
        } else {
        stop("Unknown extension: ", ext)
        }
    }


args_parser = function(){
    parser = arg_parser(
        paste0(
            "rcompile\n",
            "Performs standard three-pass compilation of Rtex (knitr) or LaTeX",
            " document. Compilation is done using pdflatex, which must be",
            " in your path. Standard LaTeX output is suppressed, but can be",
            " enabled using --verbose option. Output from bibtex is always",
            " reported."
            )
        )
    parser = add_argument(
        parser, "file", type="character",
        help="tex or Rtex document"
        )
    parser = add_argument(
        parser, "--verbose", flag=TRUE, help="Prints pdflatex output."
        )
    parser = add_argument(
        parser, "--multibib", flag=TRUE,
        help=paste0(
            "If multibib package is used, multiple aux files exist and must",
            " be compiled by bibtex. This option will find all aux files",
            " in current folder and compile them with bibtex."
            )
        )
    parser = add_argument(
        parser, "--log", type="character",
        help="If specified, output is written into this file."
        )
    args = parse_args(parser)
    return(args)
    }

if(!interactive()){
    args = args_parser()
    main(args)
    }
